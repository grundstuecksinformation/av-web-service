plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.bmuschko.docker-remote-api" version "7.1.0"
}

apply from: "gradle/versioning.gradle"

group = 'ch.so.agi'

sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    jaxb
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/xsd/Extract/0.9/Extract.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema, binding: "src/main/resources/xsd/Extract/0.9/binding.xjb") {
                arg(value: "-extension")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 11, target: 11, debug: true,
                    debugLevel: "lines,vars,source", includeantruntime: false,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-oxm:5.3.9'
    
    implementation 'net.sf.saxon:Saxon-HE:9.9.1-7' 
    implementation ('org.apache.xmlgraphics:fop:2.6') {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    implementation 'net.sf.offo:fop-hyph:2.0'   

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1' // Braucht es zur Laufzeit.
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
    implementation 'javax.activation:activation:1.1.1'
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    
    implementation 'org.locationtech.jts:jts-core:1.18.1'
    implementation group: 'org.locationtech.jts', name: 'jts-io', version: '1.18.1', ext: 'pom' 
    
    jaxb 'org.glassfish.jaxb:jaxb-xjc:2.3.2'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.3.2'
   
    runtimeOnly 'org.postgresql:postgresql'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

task deleteFilesJarDir(type: Delete) {
    delete fileTree("${buildDir}/dependency/")
    delete file("${buildDir}/dependency/")
}

task unzipJar(type: Copy) {
    from zipTree(file("${buildDir}/libs/cadastre-web-service-"+version+".jar"))
    into file("${buildDir}/dependency/")
}
unzipJar.dependsOn(deleteFilesJarDir)
bootJar.finalizedBy(unzipJar)

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

import java.text.SimpleDateFormat

docker {
    registryCredentials {
        username = System.env.DOCKER_USERNAME
        password = System.env.DOCKER_PASSWORD
    }
}

task pullDockerImage(type: DockerPullImage) {
    image = "edigonzales/cadastre-web-service:latest"
}

task buildDockerImage(type: DockerBuildImage) {
    inputDir = project.rootDir
    images = ["edigonzales/cadastre-web-service:"+version.toString(), "edigonzales/cadastre-web-service:latest"]
    labels = ["cadastre-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "cadastre-web-service.git_commit":  getCheckedOutGitCommitHash(), 
            "cadastre-web-service.travis_build": version.toString()]    
}

task createDockerContainer(type: DockerCreateContainer) {
    targetImageId buildDockerImage.getImageId()
    hostConfig.portBindings = ['8080:8080']
    //hostConfig.autoRemove = true
    exposedPorts = [new ExposedPort("tcp", [8080])]    
}

task pushDockerImages(type: DockerPushImage) {
    images = ["edigonzales/cadastre-web-service:"+version.toString(), "edigonzales/cadastre-web-service:latest"]
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)
processResources.dependsOn(copyVersionTxt)

