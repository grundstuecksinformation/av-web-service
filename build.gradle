plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "com.bmuschko.docker-remote-api" version "6.1.2"
}

apply from: "gradle/versioning.gradle"

group = 'ch.so.agi'

sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    jaxb
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    //maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases" }
    //maven { url "https://download.osgeo.org/webdav/geotools/" }
    //maven { url "http://maven.geo-solutions.it" }
    //jcenter()    
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/xsd/Extract/0.9/Extract.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema, binding: "src/main/resources/xsd/Extract/0.9/binding.xjb") {
                arg(value: "-extension")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 8, target: 8, debug: true,
                    debugLevel: "lines,vars,source", includeantruntime: false,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation ('org.springframework.boot:spring-boot-starter-data-jdbc') {
        //exclude group: 'com.zaxxer', module: 'HikariCP'
    }
    //implementation 'org.apache.tomcat:tomcat-jdbc:9.0.10'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //implementation 'javax.xml.bind:jaxb-api:2.3.1'
    //implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'    
    implementation 'org.springframework:spring-oxm:5.1.6.RELEASE'
    implementation 'net.sf.saxon:Saxon-HE:9.9.1-7' 
    
    
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
    implementation 'javax.activation:activation:1.1.1'
    
    
    /* Probleme mit jai-core und jai-codec. See: https://issues.apache.org/jira/browse/FOP-2889
    * Wurde im Trunk wieder auf optional (compile?) verändert, damit runtime ohne libs
    * möglich ist.
    * http://svn.apache.org/viewvc?view=revision&revision=1873625
    */
    //compile "javax.media:jai-core:1.1.3" 
    //compile "com.sun.media:jai-codec:1.1.3"
    //implementation 'org.apache.xmlgraphics:fop:2.4'  
    
    // Sonst gibt es die Servlet API zweimal im Classpath
    // und falls die falsche gewählt wird, funktioniert
    // Spring Boot nicht, da zu alt.
    implementation('org.apache.xmlgraphics:fop:2.4') {
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'javax.media', module: 'jai-core'
        exclude group: 'com.sun.media', module: 'jai-codec'
    }
    
    /*
    compile('org.apache.xmlgraphics:fop:2.4') {
        exclude group: 'javax.media', module: 'jai-core'
        exclude group: 'com.sun.media', module: 'jai-codec'
    }*/
  
    implementation 'net.sf.offo:fop-hyph:2.0'   
    implementation 'org.locationtech.jts:jts-core:1.16.1'
    implementation 'org.locationtech.jts:jts-io:1.16.1' // ??, ext: 'pom'
    implementation 'org.springdoc:springdoc-openapi-ui:1.2.34'    
    jaxb("org.glassfish.jaxb:jaxb-xjc:2.3.2")
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

task deleteFilesJarDir(type: Delete) {
    delete fileTree("${buildDir}/dependency/")
    delete file("${buildDir}/dependency/")
}

task unzipJar(type: Copy) {
    from zipTree(file("${buildDir}/libs/cadastre-web-service-"+version+".jar"))
    into file("${buildDir}/dependency/")
}
unzipJar.dependsOn(deleteFilesJarDir)
bootJar.finalizedBy(unzipJar)

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import java.text.SimpleDateFormat

docker {
    registryCredentials {
        username = System.env.DOCKER_USERNAME
        password = System.env.DOCKER_PASSWORD
    }
}

task pullDockerImage(type: DockerPullImage) {
    description = "Pull docker image."
    image = "sogis/cadastre-web-service:latest"
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    cacheFrom.add("sogis/cadastre-web-service:latest")
    images.add("sogis/cadastre-web-service:"+version.toString())
    images.add("sogis/cadastre-web-service:latest")
    labels = ["cadastre-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "cadastre-web-service.git_commit": getCheckedOutGitCommitHash(), 
            "cadastre-web-service.build": version.toString()]
}

// TODO: since images is a set, we do not need a loop anymore.
def tags = ["latest", version]

tags.each { tag ->
    def imageTag = tag.toString()
    task "pushDockerImage_$imageTag"(type: DockerPushImage) {
        description = "Push docker image to hub.docker.com: $imageTag"
        images = ["sogis/cadastre-web-service:$imageTag"]
    }
}

task pushDockerImages() {
    description = "Push docker images to hub.docker.com."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
    }    
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)


